// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package eventspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventsServiceClient is the client API for EventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsServiceClient interface {
	PublishEvent(ctx context.Context, opts ...grpc.CallOption) (EventsService_PublishEventClient, error)
}

type eventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsServiceClient(cc grpc.ClientConnInterface) EventsServiceClient {
	return &eventsServiceClient{cc}
}

func (c *eventsServiceClient) PublishEvent(ctx context.Context, opts ...grpc.CallOption) (EventsService_PublishEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventsService_serviceDesc.Streams[0], "/ihtkas.goexamples.gomeet22.EventsService/PublishEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsServicePublishEventClient{stream}
	return x, nil
}

type EventsService_PublishEventClient interface {
	Send(*PublishEventRequest) error
	Recv() (*PublishEventResponse, error)
	grpc.ClientStream
}

type eventsServicePublishEventClient struct {
	grpc.ClientStream
}

func (x *eventsServicePublishEventClient) Send(m *PublishEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsServicePublishEventClient) Recv() (*PublishEventResponse, error) {
	m := new(PublishEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventsServiceServer is the server API for EventsService service.
// All implementations must embed UnimplementedEventsServiceServer
// for forward compatibility
type EventsServiceServer interface {
	PublishEvent(EventsService_PublishEventServer) error
	mustEmbedUnimplementedEventsServiceServer()
}

// UnimplementedEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventsServiceServer struct {
}

func (*UnimplementedEventsServiceServer) PublishEvent(EventsService_PublishEventServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishEvent not implemented")
}
func (*UnimplementedEventsServiceServer) mustEmbedUnimplementedEventsServiceServer() {}

func RegisterEventsServiceServer(s *grpc.Server, srv EventsServiceServer) {
	s.RegisterService(&_EventsService_serviceDesc, srv)
}

func _EventsService_PublishEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServiceServer).PublishEvent(&eventsServicePublishEventServer{stream})
}

type EventsService_PublishEventServer interface {
	Send(*PublishEventResponse) error
	Recv() (*PublishEventRequest, error)
	grpc.ServerStream
}

type eventsServicePublishEventServer struct {
	grpc.ServerStream
}

func (x *eventsServicePublishEventServer) Send(m *PublishEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsServicePublishEventServer) Recv() (*PublishEventRequest, error) {
	m := new(PublishEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ihtkas.goexamples.gomeet22.EventsService",
	HandlerType: (*EventsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishEvent",
			Handler:       _EventsService_PublishEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "go-meet-bangalore-2022/protos/service.proto",
}
